{
  "openapi": "3.0.0",
  "info": {
    "description": "Flask API LIVET",
    "version": "1.0.0",
    "title": "Livet REST API FLASK ",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/"
    },
    {
      "url": "http://livetapiflask-env.eba-jqjrkzgw.us-east-1.elasticbeanstalk.com/"
    }
  ],
  "tags": [
    {
      "name": "User Request",
      "description": "Example API for requesting and return User requests"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": ["User Request"],
        "summary": "Returns Users Data",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/bookRequests"
            }
          }
        }
      },

      "post": {
        "tags": ["User Request"],
        "summary": "Create a new user",
        "requestBody": {
          "description": "User Request Post Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/usersRequestPostBody"
              }
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/users"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      }
    },
    "/users/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "required": true,
          "description": "name of the user that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["User Request"],
        "summary": "Get the data of the user request with given name",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "description": "User Request name"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/users"
            }
          },
          "400": {
            "description": "Failed. Misunderstood Request."
          },
          "404": {
            "description": "Failed. Book request not found."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "users": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "object",
            "format": "json",
            "properties": {
              "$oid": {
                "type": "string",
                "format": "string"
              }
            }
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "email": {
            "type": "email",
            "format": "email"
          }
        }
      },
      "usersRequestPostBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "format": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "rol": {
            "type": "string",
            "format": "string"
          },
          "gender": {
            "type": "string",
            "format": "string"
          },
          "age": {
            "type": "string",
            "format": "string"
          }
        }
      }
    }
  }
}
